#!/usr/bin/env python
# coding: utf-8

# 
# 
# # Blending and Pasting Images
# 
# For some computer vision systems, we'll want to be able to post our own image on top of an already existing image or video. We may also want to blend images, maybe we want to have a "highlight" effect instead of just a solid box or empty rectangle.
# 
# Let's explore what is commonly known as **Arithmetic Image Operations** with OpenCV. These are referred to as Arithmetic Operations because OpenCV is simply performing some common math with the pixels for the final effect. We'll see a bit of this in our code.
# 
# ## Blending Images
# 
# Blending Images is actually quite simple, let's look at a simple example.

import cv2
# Two images
img1 = cv2.imread('../DATA/ny.png')
img2 = cv2.imread('../DATA/nylogo.png')

img1.shape
img2.shape

import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
plt.imshow(img2)
plt.imshow(img1)
# Whoops! Let's remember to fix the RGB!

img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)
plt.imshow(img1)
plt.imshow(img2)

# ### Resizing the Images
img1 =cv2.resize(img1,(1200,1200))
img2 =cv2.resize(img2,(1200,1200))

# Let's practice resizing the image, since the DO NOT COPY image is actually quite large 1200 by 1200, and our puppy in backpack image is 1400 by 1000
plt.imshow(img1)
plt.imshow(img2)

# ### Blending the Image
# 
# We will blend the values together with the formula:
# 
# $$  img1 * \alpha  + img2 * \beta  + \gamma $$

img1.shape
img2.shape
blended = cv2.addWeighted(src1=img1,alpha=0.7,src2=img2,beta=0.3,gamma=0)
plt.imshow(blended)

